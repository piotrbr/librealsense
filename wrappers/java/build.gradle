group 'org.librealsense'
version '1.0-SNAPSHOT'

apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'cpp'

sourceCompatibility = 1.8

repositories {
    mavenCentral()
}

configurations {
    jar.archiveName = 'librealsense.jar'
    releaseJars
}

dependencies {
    testCompile group: 'junit', name: 'junit', version: '4.12'

    // processing
    testCompile group: 'org.processing', name: 'core', version: '3.3.7'
    testCompile group: 'org.jogamp.jogl', name: 'jogl-all-main', version: '2.3.2'
    testCompile group: 'org.jogamp.gluegen', name: 'gluegen-rt-main', version: '2.3.2'
}

println "Building on OS: " + System.properties['os.name']
println "Using JDK: " + System.properties['java.home']

// change these variables before building
def SYS_INCLUDE_DIR = '/usr/include'
def SYS_LOCAL_INCLUDE_DIR = '/usr/local/include'
def JNI_INCLUDE_DIR = '/home/peter/jdk-11.0.5/include'
def JNI_LIB_DIR = '/home/peter/jdk-11.0.5/lib'
def RS_INCLUDE_DIR = "${project.projectDir}/../../include"
def RS_LIB = "/home/peter/ideaprojects/librealsense/build/librealsense2.so.2.34.1"
def PROJECT_INCLUDE_DIR = "${project.projectDir}/src/rsjvm/headers"

println "Using system include directory: " + SYS_INCLUDE_DIR
println "Using system local include directory: " + SYS_LOCAL_INCLUDE_DIR
println "Using JNI include directory: " + JNI_INCLUDE_DIR
println "Using JNI lib directory: " + JNI_LIB_DIR
println "Using RealSense include directory: " + RS_INCLUDE_DIR
println "Using RealSense lib directory: " + RS_LIB
println "Using Project include directory: " + PROJECT_INCLUDE_DIR

model {
    components {
        rsjvm(NativeLibrarySpec) {
            sources {
                cpp {
                    source {
                        srcDir 'src/rsjvm/cpp'
                        include "**/*.cpp"
                    }
                    
                }
            }
            buildTypes {
                debug
                release
            }
        }
    }
    toolChains {
        gcc(Gcc) {
            eachPlatform {
                if (System.properties['os.name'].equals('Mac OS X')) {
                    cppCompiler.withArguments { args ->
                        args << "-O2"
                        args << "-I" + SYS_INCLUDE_DIR
                        args << "-I" + SYS_LOCAL_INCLUDE_DIR
                        args << "-I" + JNI_INCLUDE_DIR
                        args << "-I" + JNI_INCLUDE_DIR + "/darwin"
                        args << "-I" + RS_INCLUDE_DIR
                        args << "-I" + PROJECT_INCLUDE_DIR
                        args << "-std=c++11"
                    }
                    linker.withArguments { args ->
                        args << "-O2"
                        args << "-lc++"
                        args << RS_LIB
                    }
                } else {
                    //path "/opt/rh/devtoolset-2/root/usr/bin/gcc"
                    cppCompiler.withArguments { args ->
                        args << "-O2"
                        args << "-I" + SYS_INCLUDE_DIR
                        args << "-I" + SYS_LOCAL_INCLUDE_DIR
                        args << "-I" + JNI_INCLUDE_DIR
                        args << "-I" + JNI_INCLUDE_DIR + "/linux"
                        args << "-I" + RS_INCLUDE_DIR
                        args << "-I" + PROJECT_INCLUDE_DIR
                        args << "-std=c++11"
                    }
                    linker.withArguments { args ->
                        args << "-O2"
                        args << "-lstdc++"
                        args << RS_LIB
                    }
                }
            }
        }
        clang(Clang) {
            eachPlatform {
                if (System.properties['os.name'].equals('Mac OS X')) {
                    cppCompiler.withArguments { args ->
                        args << "-O2"
                        args << "-I" + SYS_INCLUDE_DIR
                        args << "-I" + SYS_LOCAL_INCLUDE_DIR
                        args << "-I" + JNI_INCLUDE_DIR
                        args << "-I" + JNI_INCLUDE_DIR + "/darwin"
                        args << "-I" + RS_INCLUDE_DIR
                        args << "-I" + PROJECT_INCLUDE_DIR
                        args << "-std=c++11"
                    }
                    linker.withArguments { args ->
                        args << "-O2"
                        args << "-lc++"
                        args << RS_LIB
                    }
                } else {
                    cppCompiler.withArguments { args ->
                        args << "-O2"
                        args << "-I" + SYS_INCLUDE_DIR
                        args << "-I" + SYS_LOCAL_INCLUDE_DIR
                        args << "-I" + JNI_INCLUDE_DIR
                        args << "-I" + JNI_INCLUDE_DIR + "/linux"
                        args << "-I" + RS_INCLUDE_DIR
                        args << "-I" + PROJECT_INCLUDE_DIR
                        args << "-std=c++11"
                    }
                    linker.withArguments { args ->
                        args << "-O2"
                        args << "-lstdc++"
                        args << RS_LIB
                    }
                }
            }
        }
    }
}

task copyLibs(type: Copy) {
    if (System.properties['os.name'] == 'Mac OS X') {
        from "$projectDir/build/libs/rsjvm/shared/debug/librsjvm.dylib"
    }
    else {
        from "$projectDir/build/libs/rsjvm/shared/debug/librsjvm.so"
    }
    from RS_LIB
    into 'libs'
}

build.finalizedBy(copyLibs)
